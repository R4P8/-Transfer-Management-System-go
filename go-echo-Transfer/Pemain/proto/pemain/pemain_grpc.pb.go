// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: Protobuf/pemain.proto

package pemainpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PemainService_CreatePemain_FullMethodName    = "/pemain.PemainService/CreatePemain"
	PemainService_GetPemainByID_FullMethodName   = "/pemain.PemainService/GetPemainByID"
	PemainService_GetAllPemain_FullMethodName    = "/pemain.PemainService/GetAllPemain"
	PemainService_UpdateByPlayer_FullMethodName  = "/pemain.PemainService/UpdateByPlayer"
	PemainService_UpdateByClub_FullMethodName    = "/pemain.PemainService/UpdateByClub"
	PemainService_DeletePemain_FullMethodName    = "/pemain.PemainService/DeletePemain"
	PemainService_GetPemainByClub_FullMethodName = "/pemain.PemainService/GetPemainByClub"
)

// PemainServiceClient is the client API for PemainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service pemain
type PemainServiceClient interface {
	CreatePemain(ctx context.Context, in *CreatePemainRequest, opts ...grpc.CallOption) (*PemainResponse, error)
	GetPemainByID(ctx context.Context, in *GetPemainByIDRequest, opts ...grpc.CallOption) (*PemainResponse, error)
	GetAllPemain(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPemainResponse, error)
	UpdateByPlayer(ctx context.Context, in *UpdateByPlayerRequest, opts ...grpc.CallOption) (*PemainResponse, error)
	UpdateByClub(ctx context.Context, in *UpdateByClubRequest, opts ...grpc.CallOption) (*PemainResponse, error)
	DeletePemain(ctx context.Context, in *DeletePemainRequest, opts ...grpc.CallOption) (*Empty, error)
	// ðŸ”¹ Ambil pemain berdasarkan club_id (dikirim dari service club)
	GetPemainByClub(ctx context.Context, in *GetPemainByClubRequest, opts ...grpc.CallOption) (*ListPemainResponse, error)
}

type pemainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPemainServiceClient(cc grpc.ClientConnInterface) PemainServiceClient {
	return &pemainServiceClient{cc}
}

func (c *pemainServiceClient) CreatePemain(ctx context.Context, in *CreatePemainRequest, opts ...grpc.CallOption) (*PemainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PemainResponse)
	err := c.cc.Invoke(ctx, PemainService_CreatePemain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pemainServiceClient) GetPemainByID(ctx context.Context, in *GetPemainByIDRequest, opts ...grpc.CallOption) (*PemainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PemainResponse)
	err := c.cc.Invoke(ctx, PemainService_GetPemainByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pemainServiceClient) GetAllPemain(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPemainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPemainResponse)
	err := c.cc.Invoke(ctx, PemainService_GetAllPemain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pemainServiceClient) UpdateByPlayer(ctx context.Context, in *UpdateByPlayerRequest, opts ...grpc.CallOption) (*PemainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PemainResponse)
	err := c.cc.Invoke(ctx, PemainService_UpdateByPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pemainServiceClient) UpdateByClub(ctx context.Context, in *UpdateByClubRequest, opts ...grpc.CallOption) (*PemainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PemainResponse)
	err := c.cc.Invoke(ctx, PemainService_UpdateByClub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pemainServiceClient) DeletePemain(ctx context.Context, in *DeletePemainRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PemainService_DeletePemain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pemainServiceClient) GetPemainByClub(ctx context.Context, in *GetPemainByClubRequest, opts ...grpc.CallOption) (*ListPemainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPemainResponse)
	err := c.cc.Invoke(ctx, PemainService_GetPemainByClub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PemainServiceServer is the server API for PemainService service.
// All implementations must embed UnimplementedPemainServiceServer
// for forward compatibility.
//
// Service pemain
type PemainServiceServer interface {
	CreatePemain(context.Context, *CreatePemainRequest) (*PemainResponse, error)
	GetPemainByID(context.Context, *GetPemainByIDRequest) (*PemainResponse, error)
	GetAllPemain(context.Context, *Empty) (*ListPemainResponse, error)
	UpdateByPlayer(context.Context, *UpdateByPlayerRequest) (*PemainResponse, error)
	UpdateByClub(context.Context, *UpdateByClubRequest) (*PemainResponse, error)
	DeletePemain(context.Context, *DeletePemainRequest) (*Empty, error)
	// ðŸ”¹ Ambil pemain berdasarkan club_id (dikirim dari service club)
	GetPemainByClub(context.Context, *GetPemainByClubRequest) (*ListPemainResponse, error)
	mustEmbedUnimplementedPemainServiceServer()
}

// UnimplementedPemainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPemainServiceServer struct{}

func (UnimplementedPemainServiceServer) CreatePemain(context.Context, *CreatePemainRequest) (*PemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePemain not implemented")
}
func (UnimplementedPemainServiceServer) GetPemainByID(context.Context, *GetPemainByIDRequest) (*PemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPemainByID not implemented")
}
func (UnimplementedPemainServiceServer) GetAllPemain(context.Context, *Empty) (*ListPemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPemain not implemented")
}
func (UnimplementedPemainServiceServer) UpdateByPlayer(context.Context, *UpdateByPlayerRequest) (*PemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByPlayer not implemented")
}
func (UnimplementedPemainServiceServer) UpdateByClub(context.Context, *UpdateByClubRequest) (*PemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByClub not implemented")
}
func (UnimplementedPemainServiceServer) DeletePemain(context.Context, *DeletePemainRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePemain not implemented")
}
func (UnimplementedPemainServiceServer) GetPemainByClub(context.Context, *GetPemainByClubRequest) (*ListPemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPemainByClub not implemented")
}
func (UnimplementedPemainServiceServer) mustEmbedUnimplementedPemainServiceServer() {}
func (UnimplementedPemainServiceServer) testEmbeddedByValue()                       {}

// UnsafePemainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PemainServiceServer will
// result in compilation errors.
type UnsafePemainServiceServer interface {
	mustEmbedUnimplementedPemainServiceServer()
}

func RegisterPemainServiceServer(s grpc.ServiceRegistrar, srv PemainServiceServer) {
	// If the following call pancis, it indicates UnimplementedPemainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PemainService_ServiceDesc, srv)
}

func _PemainService_CreatePemain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePemainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PemainServiceServer).CreatePemain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PemainService_CreatePemain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PemainServiceServer).CreatePemain(ctx, req.(*CreatePemainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PemainService_GetPemainByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPemainByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PemainServiceServer).GetPemainByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PemainService_GetPemainByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PemainServiceServer).GetPemainByID(ctx, req.(*GetPemainByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PemainService_GetAllPemain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PemainServiceServer).GetAllPemain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PemainService_GetAllPemain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PemainServiceServer).GetAllPemain(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PemainService_UpdateByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PemainServiceServer).UpdateByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PemainService_UpdateByPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PemainServiceServer).UpdateByPlayer(ctx, req.(*UpdateByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PemainService_UpdateByClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateByClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PemainServiceServer).UpdateByClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PemainService_UpdateByClub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PemainServiceServer).UpdateByClub(ctx, req.(*UpdateByClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PemainService_DeletePemain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePemainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PemainServiceServer).DeletePemain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PemainService_DeletePemain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PemainServiceServer).DeletePemain(ctx, req.(*DeletePemainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PemainService_GetPemainByClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPemainByClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PemainServiceServer).GetPemainByClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PemainService_GetPemainByClub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PemainServiceServer).GetPemainByClub(ctx, req.(*GetPemainByClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PemainService_ServiceDesc is the grpc.ServiceDesc for PemainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PemainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pemain.PemainService",
	HandlerType: (*PemainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePemain",
			Handler:    _PemainService_CreatePemain_Handler,
		},
		{
			MethodName: "GetPemainByID",
			Handler:    _PemainService_GetPemainByID_Handler,
		},
		{
			MethodName: "GetAllPemain",
			Handler:    _PemainService_GetAllPemain_Handler,
		},
		{
			MethodName: "UpdateByPlayer",
			Handler:    _PemainService_UpdateByPlayer_Handler,
		},
		{
			MethodName: "UpdateByClub",
			Handler:    _PemainService_UpdateByClub_Handler,
		},
		{
			MethodName: "DeletePemain",
			Handler:    _PemainService_DeletePemain_Handler,
		},
		{
			MethodName: "GetPemainByClub",
			Handler:    _PemainService_GetPemainByClub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Protobuf/pemain.proto",
}
