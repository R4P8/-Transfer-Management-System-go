// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: Protobuf/club.proto

package clubpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClubService_CreateClub_FullMethodName  = "/club.ClubService/CreateClub"
	ClubService_GetClubByID_FullMethodName = "/club.ClubService/GetClubByID"
	ClubService_GetAllClubs_FullMethodName = "/club.ClubService/GetAllClubs"
	ClubService_UpdateClub_FullMethodName  = "/club.ClubService/UpdateClub"
	ClubService_DeleteClub_FullMethodName  = "/club.ClubService/DeleteClub"
	ClubService_AddIncome_FullMethodName   = "/club.ClubService/AddIncome"
	ClubService_Spend_FullMethodName       = "/club.ClubService/Spend"
)

// ClubServiceClient is the client API for ClubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =============================
// Service Club
// =============================
type ClubServiceClient interface {
	// CRUD Club
	CreateClub(ctx context.Context, in *CreateClubRequest, opts ...grpc.CallOption) (*ClubResponse, error)
	GetClubByID(ctx context.Context, in *GetClubByIDRequest, opts ...grpc.CallOption) (*ClubResponse, error)
	GetAllClubs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListClubResponse, error)
	UpdateClub(ctx context.Context, in *UpdateClubRequest, opts ...grpc.CallOption) (*ClubResponse, error)
	DeleteClub(ctx context.Context, in *DeleteClubRequest, opts ...grpc.CallOption) (*Empty, error)
	// Budget khusus (tidak bisa sembarangan edit)
	AddIncome(ctx context.Context, in *AddIncomeRequest, opts ...grpc.CallOption) (*ClubResponse, error)
	Spend(ctx context.Context, in *SpendRequest, opts ...grpc.CallOption) (*ClubResponse, error)
}

type clubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClubServiceClient(cc grpc.ClientConnInterface) ClubServiceClient {
	return &clubServiceClient{cc}
}

func (c *clubServiceClient) CreateClub(ctx context.Context, in *CreateClubRequest, opts ...grpc.CallOption) (*ClubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClubResponse)
	err := c.cc.Invoke(ctx, ClubService_CreateClub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) GetClubByID(ctx context.Context, in *GetClubByIDRequest, opts ...grpc.CallOption) (*ClubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClubResponse)
	err := c.cc.Invoke(ctx, ClubService_GetClubByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) GetAllClubs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListClubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClubResponse)
	err := c.cc.Invoke(ctx, ClubService_GetAllClubs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) UpdateClub(ctx context.Context, in *UpdateClubRequest, opts ...grpc.CallOption) (*ClubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClubResponse)
	err := c.cc.Invoke(ctx, ClubService_UpdateClub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) DeleteClub(ctx context.Context, in *DeleteClubRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ClubService_DeleteClub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) AddIncome(ctx context.Context, in *AddIncomeRequest, opts ...grpc.CallOption) (*ClubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClubResponse)
	err := c.cc.Invoke(ctx, ClubService_AddIncome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) Spend(ctx context.Context, in *SpendRequest, opts ...grpc.CallOption) (*ClubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClubResponse)
	err := c.cc.Invoke(ctx, ClubService_Spend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubServiceServer is the server API for ClubService service.
// All implementations must embed UnimplementedClubServiceServer
// for forward compatibility.
//
// =============================
// Service Club
// =============================
type ClubServiceServer interface {
	// CRUD Club
	CreateClub(context.Context, *CreateClubRequest) (*ClubResponse, error)
	GetClubByID(context.Context, *GetClubByIDRequest) (*ClubResponse, error)
	GetAllClubs(context.Context, *Empty) (*ListClubResponse, error)
	UpdateClub(context.Context, *UpdateClubRequest) (*ClubResponse, error)
	DeleteClub(context.Context, *DeleteClubRequest) (*Empty, error)
	// Budget khusus (tidak bisa sembarangan edit)
	AddIncome(context.Context, *AddIncomeRequest) (*ClubResponse, error)
	Spend(context.Context, *SpendRequest) (*ClubResponse, error)
	mustEmbedUnimplementedClubServiceServer()
}

// UnimplementedClubServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClubServiceServer struct{}

func (UnimplementedClubServiceServer) CreateClub(context.Context, *CreateClubRequest) (*ClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClub not implemented")
}
func (UnimplementedClubServiceServer) GetClubByID(context.Context, *GetClubByIDRequest) (*ClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubByID not implemented")
}
func (UnimplementedClubServiceServer) GetAllClubs(context.Context, *Empty) (*ListClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllClubs not implemented")
}
func (UnimplementedClubServiceServer) UpdateClub(context.Context, *UpdateClubRequest) (*ClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClub not implemented")
}
func (UnimplementedClubServiceServer) DeleteClub(context.Context, *DeleteClubRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClub not implemented")
}
func (UnimplementedClubServiceServer) AddIncome(context.Context, *AddIncomeRequest) (*ClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIncome not implemented")
}
func (UnimplementedClubServiceServer) Spend(context.Context, *SpendRequest) (*ClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spend not implemented")
}
func (UnimplementedClubServiceServer) mustEmbedUnimplementedClubServiceServer() {}
func (UnimplementedClubServiceServer) testEmbeddedByValue()                     {}

// UnsafeClubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubServiceServer will
// result in compilation errors.
type UnsafeClubServiceServer interface {
	mustEmbedUnimplementedClubServiceServer()
}

func RegisterClubServiceServer(s grpc.ServiceRegistrar, srv ClubServiceServer) {
	// If the following call pancis, it indicates UnimplementedClubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClubService_ServiceDesc, srv)
}

func _ClubService_CreateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).CreateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_CreateClub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).CreateClub(ctx, req.(*CreateClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_GetClubByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClubByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).GetClubByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_GetClubByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).GetClubByID(ctx, req.(*GetClubByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_GetAllClubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).GetAllClubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_GetAllClubs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).GetAllClubs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_UpdateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).UpdateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_UpdateClub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).UpdateClub(ctx, req.(*UpdateClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_DeleteClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).DeleteClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_DeleteClub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).DeleteClub(ctx, req.(*DeleteClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_AddIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).AddIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_AddIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).AddIncome(ctx, req.(*AddIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_Spend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).Spend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_Spend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).Spend(ctx, req.(*SpendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubService_ServiceDesc is the grpc.ServiceDesc for ClubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "club.ClubService",
	HandlerType: (*ClubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClub",
			Handler:    _ClubService_CreateClub_Handler,
		},
		{
			MethodName: "GetClubByID",
			Handler:    _ClubService_GetClubByID_Handler,
		},
		{
			MethodName: "GetAllClubs",
			Handler:    _ClubService_GetAllClubs_Handler,
		},
		{
			MethodName: "UpdateClub",
			Handler:    _ClubService_UpdateClub_Handler,
		},
		{
			MethodName: "DeleteClub",
			Handler:    _ClubService_DeleteClub_Handler,
		},
		{
			MethodName: "AddIncome",
			Handler:    _ClubService_AddIncome_Handler,
		},
		{
			MethodName: "Spend",
			Handler:    _ClubService_Spend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Protobuf/club.proto",
}
